{"version":3,"sources":["vendor/ember-cli/app-prefix.js","ember-analyzer/app.js","ember-analyzer/components/audio-visualizer.js","ember-analyzer/components/range-slider.js","ember-analyzer/components/track-control.js","ember-analyzer/components/welcome-page.js","ember-analyzer/helpers/app-version.js","ember-analyzer/helpers/fx.js","ember-analyzer/helpers/pluralize.js","ember-analyzer/helpers/singularize.js","ember-analyzer/helpers/sum.js","ember-analyzer/initializers/app-version.js","ember-analyzer/initializers/container-debug-adapter.js","ember-analyzer/initializers/data-adapter.js","ember-analyzer/initializers/ember-data.js","ember-analyzer/initializers/export-application-global.js","ember-analyzer/initializers/injectStore.js","ember-analyzer/initializers/store.js","ember-analyzer/initializers/transforms.js","ember-analyzer/instance-initializers/ember-data.js","ember-analyzer/resolver.js","ember-analyzer/router.js","ember-analyzer/routes/index.js","ember-analyzer/services/ajax.js","ember-analyzer/services/audio-ctx.js","ember-analyzer/services/visualizer.js","ember-analyzer/templates/application.js","ember-analyzer/templates/components/audio-visualizer.js","ember-analyzer/templates/components/track-control.js","ember-analyzer/templates/index.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-config.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["\"use strict\";\n\n\n","define('ember-analyzer/app', ['exports', 'ember-analyzer/resolver', 'ember-load-initializers', 'ember-analyzer/config/environment'], function (exports, _resolver, _emberLoadInitializers, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var App = Ember.Application.extend({\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix,\n    Resolver: _resolver.default\n  });\n\n  (0, _emberLoadInitializers.default)(App, _environment.default.modulePrefix);\n\n  exports.default = App;\n});","define('ember-analyzer/components/audio-visualizer', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Component.extend({\n    /**\n     * load tracks and setup visualizer\n     */\n    init: function init() {\n      var _this = this;\n\n      this._super.apply(this, arguments);\n\n      // fetch the buffers\n      this.get('audioCtx').fetchBuffers(['./samples/guitar_1.mp3', './samples/guitar_2.mp3', './samples/vocal.mp3'])\n\n      // setup the visualizer\n      .then(function (bufferList) {\n        // hack to set initial gains\n        _this.set('audioCtx.gains.0.gain.value', 0.25); // rhythm guitar\n        _this.set('audioCtx.gains.1.gain.value', 0.3); // rhythm guitar\n        _this.set('audioCtx.gains.2.gain.value', 2); // vocal\n\n        // create the visualizer and append it to the body\n        _this.set('visualizer', Ember.inject.service('visualizer'));\n        document.body.appendChild(_this.get('visualizer.el'));\n      });\n    },\n\n\n    actions: {\n      /**\n       * fast forwards the tracks\n       */\n      fastForward: function fastForward() {\n        this.get('audioCtx').adjustTime(10);\n      },\n\n\n      /**\n       * plays all the tracks from the beginning\n       */\n      togglePlay: function togglePlay() {\n        if (!this.get('audioCtx.playing')) {\n          this.get('audioCtx').play();\n        } else {\n          this.get('audioCtx').stop();\n        }\n      },\n\n\n      /**\n       * pause playback if it's playing\n       */\n      pause: function pause() {\n        this.get('audioCtx').pause();\n      },\n\n\n      /**\n       * rewinds the tracks\n       */\n      rewind: function rewind() {\n        this.get('audioCtx').adjustTime(-10);\n      },\n\n\n      /**\n       * update gain node for track when slider changes\n       * @param {number} value\n       * @param {number} idx\n       * @todo move this to the audioCtx - this is really ugly\n       */\n      sliderChanged: function sliderChanged(value, idx) {\n        this.get('audioCtx.gains')[idx].gain.value = value / 50;\n      }\n    },\n\n    /**\n     * audio service\n     */\n    audioCtx: Ember.inject.service('audio-ctx'),\n\n    /**\n     * visualizer service\n     */\n    visualizer: Ember.inject.service('visualizer')\n  });\n});","define('ember-analyzer/components/range-slider', ['exports', 'ember-cli-nouislider/components/range-slider'], function (exports, _rangeSlider) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _rangeSlider.default;\n});","define('ember-analyzer/components/track-control', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Component.extend({\n    classNames: ['track-control-wrapper'],\n\n    sliderRange: { min: 0, max: 100 },\n\n    /**\n     * get the initial gain value for a track\n     * @returns number\n     */\n    gainValue: Ember.computed(function () {\n      return this.get('audioCtx.gains')[this.get('idx')].gain.value * 50;\n    }),\n\n    actions: {\n      /**\n       * turns off bypass for a pedal\n       * @param {object} pedal - the tuna pedal object\n       * @param {number} idx - index of the pedal in the chain\n       */\n      activatePedal: function activatePedal(pedal, idx) {\n        if (pedal.bypass) this.set('fx.' + idx + '.bypass', 0);else this.set('fx.' + idx + '.bypass', 1);\n      },\n\n\n      /**\n       * sends the value and index of track up to parent component\n       * @param {number} value\n       */\n      sliderChanged: function sliderChanged(value) {\n        this.sendAction('sliderChanged', value, this.idx);\n      }\n    }\n  });\n});","define('ember-analyzer/components/welcome-page', ['exports', 'ember-welcome-page/components/welcome-page'], function (exports, _welcomePage) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _welcomePage.default;\n    }\n  });\n});","define('ember-analyzer/helpers/app-version', ['exports', 'ember-analyzer/config/environment', 'ember-cli-app-version/utils/regexp'], function (exports, _environment, _regexp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.appVersion = appVersion;\n  var version = _environment.default.APP.version;\n  function appVersion(_) {\n    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (hash.hideSha) {\n      return version.match(_regexp.versionRegExp)[0];\n    }\n\n    if (hash.hideVersion) {\n      return version.match(_regexp.shaRegExp)[0];\n    }\n\n    return version;\n  }\n\n  exports.default = Ember.Helper.helper(appVersion);\n});","define(\"ember-analyzer/helpers/fx\", [\"exports\"], function (exports) {\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports.default = {\n\t\tChorus: {\n\t\t\trate: 1.5, // 0.01 to 8+\n\t\t\tfeedback: 0.2, // 0 to 1+\n\t\t\tdelay: 0.0045, // 0 to 1\n\t\t\tbypass: 1 // the value 1 starts the effect as bypassed, 0 or 1\n\t\t},\n\t\t// Delay: {\n\t\t// \tfeedback                : 0.45,                          // 0 to 1+\n\t\t// \tdelayTime               : 150,                           // how many milliseconds should the wet signal be delayed?\n\t\t// \twetLevel                : 0.25,                          // 0 to 1+\n\t\t// \tdryLevel                : 1,                             // 0 to 1+\n\t\t// \tcutoff                  : 20,                            // cutoff frequency of the built in highpass-filter. 20 to 22050\n\t\t// \tbypass                  : 1\n\t\t// },\n\t\tPhaser: {\n\t\t\trate: 1.2, // 0.01 to 8 is a decent range, but higher values are possible\n\t\t\tdepth: 0.3, // 0 to 1\n\t\t\tfeedback: 0.2, // 0 to 1+\n\t\t\tstereoPhase: 30, // 0 to 180\n\t\t\tbaseModulationFrequency: 700, // 500 to 1500\n\t\t\tbypass: 1\n\t\t},\n\t\tOverdrive: {\n\t\t\toutputGain: 0.7, // 0 to 1+\n\t\t\tdrive: 1, // 0 to 1\n\t\t\tcurveAmount: 0.7, // 0 to 1\n\t\t\talgorithmIndex: 0, // 0 to 5, selects one of our drive algorithms\n\t\t\tbypass: 1\n\t\t},\n\t\tCompressor: {\n\t\t\tthreshold: 0.5, // -100 to 0\n\t\t\tmakeupGain: 1, // 0 and up\n\t\t\tattack: 1, // 0 to 1000\n\t\t\trelease: 0, // 0 to 3000\n\t\t\tratio: 4, // 1 to 20\n\t\t\tknee: 5, // 0 to 40\n\t\t\tautomakeup: true, // true/false\n\t\t\tbypass: 1\n\t\t}\n\t\t// Tremolo: {\n\t\t// \tintensity               : 0.3,                           // 0 to 1\n\t\t// \trate                    : 0.1,                           // 0.001 to 8\n\t\t// \tstereoPhase             : 0,                             // 0 to 180\n\t\t// \tbypass                  : 1\n\t\t// }\n\t};\n});","define('ember-analyzer/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _pluralize) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _pluralize.default;\n});","define('ember-analyzer/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _singularize) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _singularize.default;\n});","define(\"ember-analyzer/helpers/sum\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.sum = sum;\n  /**\n   * helper for getting sum of two numbers\n   */\n  function sum(params) {\n    return params.reduce(function (a, b) {\n      return a + b;\n    });\n  }\n\n  exports.default = Ember.Helper.helper(sum);\n});","define('ember-analyzer/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'ember-analyzer/config/environment'], function (exports, _initializerFactory, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var _config$APP = _environment.default.APP,\n      name = _config$APP.name,\n      version = _config$APP.version;\n  exports.default = {\n    name: 'App Version',\n    initialize: (0, _initializerFactory.default)(name, version)\n  };\n});","define('ember-analyzer/initializers/container-debug-adapter', ['exports', 'ember-resolver/resolvers/classic/container-debug-adapter'], function (exports, _containerDebugAdapter) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'container-debug-adapter',\n\n    initialize: function initialize() {\n      var app = arguments[1] || arguments[0];\n\n      app.register('container-debug-adapter:main', _containerDebugAdapter.default);\n      app.inject('container-debug-adapter:main', 'namespace', 'application:main');\n    }\n  };\n});","define('ember-analyzer/initializers/data-adapter', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'data-adapter',\n    before: 'store',\n    initialize: function initialize() {}\n  };\n});","define('ember-analyzer/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data'], function (exports, _setupContainer) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'ember-data',\n    initialize: _setupContainer.default\n  };\n});","define('ember-analyzer/initializers/export-application-global', ['exports', 'ember-analyzer/config/environment'], function (exports, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.initialize = initialize;\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (_environment.default.exportApplicationGlobal !== false) {\n      var theGlobal;\n      if (typeof window !== 'undefined') {\n        theGlobal = window;\n      } else if (typeof global !== 'undefined') {\n        theGlobal = global;\n      } else if (typeof self !== 'undefined') {\n        theGlobal = self;\n      } else {\n        // no reasonable global, just bail\n        return;\n      }\n\n      var value = _environment.default.exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = Ember.String.classify(_environment.default.modulePrefix);\n      }\n\n      if (!theGlobal[globalName]) {\n        theGlobal[globalName] = application;\n\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n            delete theGlobal[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports.default = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n});","define('ember-analyzer/initializers/injectStore', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'injectStore',\n    before: 'store',\n    initialize: function initialize() {}\n  };\n});","define('ember-analyzer/initializers/store', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'store',\n    after: 'ember-data',\n    initialize: function initialize() {}\n  };\n});","define('ember-analyzer/initializers/transforms', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'transforms',\n    before: 'store',\n    initialize: function initialize() {}\n  };\n});","define(\"ember-analyzer/instance-initializers/ember-data\", [\"exports\", \"ember-data/instance-initializers/initialize-store-service\"], function (exports, _initializeStoreService) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: \"ember-data\",\n    initialize: _initializeStoreService.default\n  };\n});","define('ember-analyzer/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _emberResolver.default;\n});","define('ember-analyzer/router', ['exports', 'ember-analyzer/config/environment'], function (exports, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var Router = Ember.Router.extend({\n    location: _environment.default.locationType,\n    rootURL: _environment.default.rootURL\n  });\n\n  Router.map(function () {});\n\n  exports.default = Router;\n});","define('ember-analyzer/routes/index', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Route.extend({});\n});","define('ember-analyzer/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _ajax) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _ajax.default;\n    }\n  });\n});","define('ember-analyzer/services/audio-ctx', ['exports', 'ember-analyzer/helpers/fx'], function (exports, _fx) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var SMOOTHING = 0.8;\n\n  var PAUSED_AT = 0;\n  var STARTED_AT = 0;\n\n  exports.default = Ember.Service.extend({\n    init: function init() {\n      this._super.apply(this, arguments);\n\n      // cross-browser audio context\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      this.set('ctx', new AudioContext());\n    },\n\n\n    /**\n     * adjusts playback offset by given diff in seconds\n     * @param {number} diff - number of seconds to rewind\n     */\n    adjustTime: function adjustTime(diff) {\n      this.pause();\n\n      // move pointer back\n      PAUSED_AT += diff;\n\n      // make sure it's not before the start\n      if (PAUSED_AT < 0) PAUSED_AT = 0;\n\n      this.play();\n    },\n\n\n    /**\n     * fetches buffers by filename\n     * @private\n     * @param {string[]} files - an array of filenames\n     * @returns {Promise}\n     */\n    fetchBuffers: function fetchBuffers(files) {\n      var _this = this;\n\n      var self = this;\n\n      return new Promise(function (resolve, reject) {\n        var bufferLoader = new BufferLoader(_this.get('ctx'), files, function (bufferList) {\n          return resolve(bufferList);\n        });\n        bufferLoader.load();\n      }).then(function (bufferList) {\n        // build the audio path\n        var _buildAudioPath = buildAudioPath(bufferList.length, _this.get('ctx')),\n            fx = _buildAudioPath.fx,\n            analyserNode = _buildAudioPath.analyserNode,\n            merger = _buildAudioPath.merger,\n            gains = _buildAudioPath.gains;\n\n        // save the things\n\n\n        _this.setProperties({\n          analyserNode: analyserNode,\n          bufferList: bufferList,\n          fx: fx,\n          gains: gains,\n          merger: merger\n        });\n\n        return bufferList;\n      });\n    },\n\n\n    /**\n     * get the duration of the tracks\n     * @returns {number}\n     */\n    getDuration: function getDuration() {\n      return this.get('bufferList')[0].duration;\n    },\n\n\n    /**\n     * get current position of playback in seconds\n     * @returns {number}\n     */\n    getPosition: function getPosition() {\n      if (this.get('playing')) return this.get('ctx').currentTime - STARTED_AT;else return PAUSED_AT;\n    },\n\n\n    /**\n     * pauses tracks\n     */\n    pause: function pause() {\n      // block errantly setting pausedAt\n      if (!this.get('playing')) return;\n\n      // stop them!\n      this.tracks.forEach(function (track) {\n        return track.stop(0);\n      });\n\n      // track time\n      PAUSED_AT = this.get('ctx').currentTime - STARTED_AT;\n\n      // set playToggleLabel\n      this.set('playing', false);\n    },\n\n\n    /**\n     * play tracks and init start/paused flags\n     */\n    play: function play() {\n      var _this2 = this;\n\n      var offset = PAUSED_AT;\n\n      // create the tracks\n      this.tracks = createTracks(this.bufferList, this.get('ctx'));\n\n      // connect the tracks to the merger\n      this.tracks.forEach(function (track, idx) {\n        return track.connect(_this2.fx[idx][0].input);\n      });\n\n      // start em up\n      this.tracks.forEach(function (track) {\n        return track.start(0, offset);\n      });\n\n      // track time\n      STARTED_AT = this.get('ctx').currentTime - offset;\n      PAUSED_AT = 0;\n\n      // set playing flag\n      this.set('playing', true);\n    },\n\n\n    /**\n     * playing flag\n     */\n    playing: false,\n\n    /**\n     * stop the tracks and clears paused/started flags\n     */\n    stop: function stop() {\n      // stop them!\n      this.tracks.forEach(function (track) {\n        return track.stop(0);\n      });\n\n      // track time\n      STARTED_AT = 0;\n      PAUSED_AT = 0;\n\n      // set playToggleLabel\n      this.set('playing', false);\n    }\n  });\n\n\n  /**\n   * builds the audio path\n   * @private\n   * @param {number} numChannels - number of channels\n   * @param {AudioContext} audioCtx - the component's audio context\n   * @return {}\n   */\n  function buildAudioPath(numChannels, audioCtx) {\n    var tuna = new Tuna(audioCtx);\n\n    // create the analyserNode\n    var analyserNode = audioCtx.createAnalyser();\n    analyserNode.fftSize = 2048;\n    analyserNode.smoothingTimeConstant = SMOOTHING;\n\n    // create the merger\n    var merger = audioCtx.createChannelMerger(numChannels);\n\n    // create and connect the gain nodes\n    var gains = Array(numChannels).fill().map(function (v, i) {\n      var gain = audioCtx.createGain();\n      return gain;\n    });\n\n    // create fx\n    var fx = Array(numChannels).fill().map(function () {\n      return Object.keys(_fx.default).map(function (name) {\n        return new tuna[name](_fx.default[name]);\n      });\n    });\n\n    // main gain\n    var mainGain = audioCtx.createGain();\n    mainGain.gain.value = 1;\n\n    // build the path\n    fx.forEach(function (chain, idx) {\n      // connect pedals together\n      chain.forEach(function (pedal, jdx) {\n        if (jdx > 0) chain[jdx - 1].connect(pedal.input);\n      });\n\n      // connect to proper gain\n      chain[chain.length - 1].connect(gains[idx]);\n\n      // connect gain to merger\n      gains[idx].connect(merger);\n    });\n\n    // connect merger -> mainGain -> analyserNode\n    merger.connect(mainGain);\n    mainGain.connect(analyserNode);\n    analyserNode.connect(audioCtx.destination);\n\n    return { fx: fx, gains: gains, merger: merger, analyserNode: analyserNode };\n  }\n\n  /**\n   * creates an individual audio track\n   * @private\n   * @param {Buffer} buffer\n   * @param {AudioContext} audioCtx\n   * @returns {AudioBufferSourceNode}\n   */\n  function createTrack(buffer, audioCtx) {\n    var source = audioCtx.createBufferSource();\n    source.buffer = buffer;\n    return source;\n  }\n\n  /**\n   * creates tracks to be played from a list of audio buffers\n   * @private\n   * @param {Buffer[]} bufferList - a list of buffers\n   * @param {AudioContext} audioCtx\n   * @returns {AudioBufferSourceNode}[]} - an array of source nodes\n   */\n  function createTracks(bufferList, audioCtx) {\n    return bufferList.map(function (buffer) {\n      return createTrack(buffer, audioCtx);\n    });\n  }\n});","define('ember-analyzer/services/visualizer', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  /**\n   * constants for visualizer options\n   * @todo make these dynamic options that can be passed to init\n   */\n  var COLOR = 0xcc0000;\n  var OFFSET = -5;\n  var INITIAL_HEIGHT = 0.5;\n  var NUM_CUBES = 48;\n  var SCALE = 50;\n  var ROTATION_RATE = 0.02;\n  var TOTAL_WIDTH = 10;\n  var TRACKING_COLOR = 0xdd00ee;\n  var WIDTH = TOTAL_WIDTH / NUM_CUBES;\n\n  exports.default = Ember.Service.extend({\n    init: function init() {\n      // get the audio context\n      var audioCtx = this.get('audioCtx');\n\n      // crete the scene\n      var scene = new THREE.Scene();\n\n      // create the camera\n      var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 5;\n\n      // add some lighting\n      var light = new THREE.HemisphereLight(0xffffbb, 0x080820, 1);\n      scene.add(light);\n\n      // create renderer\n      var renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth - 10, window.innerHeight - 10);\n\n      // add cubes for frequency visualization\n      var cubes = addCubes(audioCtx.get('analyserNode'), scene);\n\n      // add cube for tracking position in song\n      var trackingCube = createCube(OFFSET, WIDTH / 2, TRACKING_COLOR);\n      trackingCube.position.y = -0.5;\n      scene.add(trackingCube);\n\n      // animate update of cubes\n      var animate = function animate() {\n        // get the animation frame\n        requestAnimationFrame(animate);\n\n        var position = audioCtx.getPosition();\n        var duration = audioCtx.getDuration();\n\n        // update analyser cubes\n        updateCubes(audioCtx.get('analyserNode'), cubes);\n\n        // update the tracking cube\n        updateTrackingCube(trackingCube, duration, position);\n\n        // draw the scene\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      // return the dom element for appending\n      this.set('el', renderer.domElement);\n    },\n\n\n    audioCtx: Ember.inject.service('audio-ctx')\n  });\n\n\n  /**\n   * updates tracking cube\n   * @private\n   * @param {THREE.Mesh} trackingCube\n   * @param {number} duration\n   * @param {number} position\n   */\n  function updateTrackingCube(trackingCube, duration, position) {\n    trackingCube.rotation.y += ROTATION_RATE * 2;\n    trackingCube.rotation.x += ROTATION_RATE;\n\n    // fail fast if not playing\n    if (position > duration || position < 0) return;\n\n    // set the position\n    var secWidth = TOTAL_WIDTH / duration;\n    trackingCube.position.x = secWidth * position + OFFSET;\n  }\n\n  /**\n   * adds all the cubes to the scene\n   * @private\n   * @param {AnalyserNode} analyserNode\n   * @param {THREE.Scene} scene\n   * @returns {THREE.Mesh[]}\n   */\n  function addCubes(analyserNode, scene) {\n    var cubes = [];\n\n    for (var i = 0; i < NUM_CUBES; i++) {\n      var offset = OFFSET + i * WIDTH;\n      var cube = createCube(offset, WIDTH / 2, COLOR + i * 5);\n      scene.add(cube);\n      cubes.push(cube);\n    }\n\n    return cubes;\n  }\n\n  /**\n   * creates a cube\n   * @private\n   * @param {number} offset - offset from the left edge of the analyzer\n   * @param {number} width - width of space for cube\n   * @param {number} color - hexidecimal number for cube\n   * @returns {THREE.Mesh}\n   */\n  function createCube(offset, width, color) {\n    var geometry = new THREE.BoxGeometry(width, width, width);\n    var material = new THREE.MeshPhongMaterial({ color: color });\n    var cube = new THREE.Mesh(geometry, material);\n    cube.position.set(offset, 0, 0);\n    cube.rotation.x = 0.3;\n    cube.rotation.y = 0.3;\n    return cube;\n  }\n\n  /**\n   * updates the properties of a cube\n   * @private\n   * @param {THREE.Mesh} cube - cube mesh to update\n   * @param {number} value - value to use for update\n   * @param {boolean} clockwise - direction for rotation\n   */\n  function updateCube(cube, value, clockwise) {\n    cube.scale.y = value / 255 * SCALE + INITIAL_HEIGHT;\n    // cube.material.color.setHex(cube.material.color + 1)\n\n    if (clockwise) cube.rotation.y += ROTATION_RATE;else cube.rotation.y -= ROTATION_RATE;\n  }\n\n  /**\n   * updates a list of cubes, given an analyserNode\n   * @private\n   * @param {AnalyserNode} analyserNode\n   * @param {THREE.Mesh[]} cubes\n   */\n  function updateCubes(analyserNode, cubes) {\n    var freqByteData = new Uint8Array(analyserNode.frequencyBinCount);\n    analyserNode.getByteFrequencyData(freqByteData);\n    var bucketSize = analyserNode.frequencyBinCount / NUM_CUBES;\n\n    for (var i = 0; i < NUM_CUBES; i++) {\n      var freq = i * bucketSize;\n      var cube = cubes[i];\n      var avg = freqByteData.slice(freq, (i + 1) * bucketSize).reduce(function (a, b) {\n        return a + b;\n      }) / bucketSize;\n\n      updateCube(cube, avg, i % 2 === 0);\n    }\n  }\n});","define(\"ember-analyzer/templates/application\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.HTMLBars.template({ \"id\": \"xtC2Ci3y\", \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"outlet\\\"],false],[0,\\\"\\\\n\\\"]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"ember-analyzer/templates/application.hbs\" } });\n});","define(\"ember-analyzer/templates/components/audio-visualizer\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.HTMLBars.template({ \"id\": \"GcoCxjcR\", \"block\": \"{\\\"symbols\\\":[\\\"f\\\",\\\"index\\\"],\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"id\\\",\\\"top-controls\\\"],[7],[0,\\\"\\\\n  \\\"],[6,\\\"button\\\"],[3,\\\"action\\\",[[19,0,[]],\\\"rewind\\\"]],[7],[0,\\\"<<\\\"],[8],[0,\\\"\\\\n  \\\"],[6,\\\"button\\\"],[10,\\\"class\\\",[26,[[25,\\\"if\\\",[[19,0,[\\\"audioCtx\\\",\\\"playing\\\"]],\\\"red\\\",\\\"green\\\"],null]]]],[3,\\\"action\\\",[[19,0,[]],\\\"togglePlay\\\"]],[7],[1,[25,\\\"if\\\",[[19,0,[\\\"audioCtx\\\",\\\"playing\\\"]],\\\"stop\\\",\\\"play\\\"],null],false],[8],[0,\\\"\\\\n  \\\"],[6,\\\"button\\\"],[9,\\\"class\\\",\\\"blue\\\"],[3,\\\"action\\\",[[19,0,[]],\\\"pause\\\"]],[7],[0,\\\"pause\\\"],[8],[0,\\\"\\\\n  \\\"],[6,\\\"button\\\"],[3,\\\"action\\\",[[19,0,[]],\\\"fastForward\\\"]],[7],[0,\\\">>\\\"],[8],[0,\\\"\\\\n\\\"],[8],[0,\\\"\\\\n\\\\n\\\"],[6,\\\"div\\\"],[9,\\\"id\\\",\\\"bottom-controls\\\"],[7],[0,\\\"\\\\n\\\"],[4,\\\"each\\\",[[19,0,[\\\"audioCtx\\\",\\\"fx\\\"]]],null,{\\\"statements\\\":[[0,\\\"    \\\"],[1,[25,\\\"track-control\\\",null,[[\\\"fx\\\",\\\"audioCtx\\\",\\\"idx\\\",\\\"sliderChanged\\\"],[[19,1,[]],[19,0,[\\\"audioCtx\\\"]],[19,2,[]],\\\"sliderChanged\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1,2]},null],[8],[0,\\\"\\\\n\\\\n\\\"],[6,\\\"h1\\\"],[9,\\\"id\\\",\\\"advice\\\"],[7],[0,\\\"just play...\\\"],[8],[0,\\\"\\\\n\\\"]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"ember-analyzer/templates/components/audio-visualizer.hbs\" } });\n});","define(\"ember-analyzer/templates/components/track-control\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.HTMLBars.template({ \"id\": \"nZyoY5t7\", \"block\": \"{\\\"symbols\\\":[\\\"f\\\",\\\"jdx\\\"],\\\"statements\\\":[[6,\\\"button\\\"],[9,\\\"class\\\",\\\"fx\\\"],[7],[0,\\\"track \\\"],[1,[25,\\\"sum\\\",[[19,0,[\\\"idx\\\"]],1],null],false],[8],[0,\\\"\\\\n\\\"],[1,[25,\\\"range-slider\\\",null,[[\\\"start\\\",\\\"on-slide\\\"],[[19,0,[\\\"gainValue\\\"]],\\\"sliderChanged\\\"]]],false],[0,\\\"\\\\n\\\"],[4,\\\"each\\\",[[19,0,[\\\"fx\\\"]]],null,{\\\"statements\\\":[[0,\\\"  \\\"],[6,\\\"button\\\"],[10,\\\"class\\\",[26,[\\\"fx \\\",[25,\\\"if\\\",[[19,1,[\\\"bypass\\\"]],\\\"\\\",\\\"red\\\"],null]]]],[3,\\\"action\\\",[[19,0,[]],\\\"activatePedal\\\",[19,1,[]],[19,2,[]]]],[7],[1,[19,1,[\\\"name\\\"]],false],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1,2]},null]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"ember-analyzer/templates/components/track-control.hbs\" } });\n});","define(\"ember-analyzer/templates/index\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.HTMLBars.template({ \"id\": \"PbSqm5Wd\", \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"audio-visualizer\\\"],false],[0,\\\"\\\\n\\\"],[1,[18,\\\"outlet\\\"],false],[0,\\\"\\\\n\\\"]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"ember-analyzer/templates/index.hbs\" } });\n});","\n","define('ember-analyzer/config/environment', ['ember'], function(Ember) {\n  var prefix = 'ember-analyzer';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","if (!runningTests) {\n  require(\"ember-analyzer/app\")[\"default\"].create({\"name\":\"ember-analyzer\",\"version\":\"0.0.0+65543d36\"});\n}\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfzKA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;","file":"ember-analyzer.js"}